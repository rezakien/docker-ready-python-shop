import asyncio
import logging
from typing import Union

from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery

from keyboards.default import menu_keyboard
from keyboards.inline.callbacks import lang_callback
from keyboards.inline.lang_keyboard import lang_keyboard
from loader import dp, _
from utils.db_api.database import DBCommands

db = DBCommands()


@dp.message_handler(Text(equals=[_("–ö–∞—Ç–∞–ª–æ–≥"), _("–ö–æ—Ä–∑–∏–Ω–∞"), _("–ú–æ–∏ –∑–∞–∫–∞–∑—ã"), _("–ü–æ–º–æ—â—å"), _("–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")]))
async def menu_handler(message: Message):
    menu_category = message.text
    text = ""
    if menu_category == _("–ö–∞—Ç–∞–ª–æ–≥"):
        text = _("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüëáüèª")
        await message.answer(f"{text}", reply_markup=ReplyKeyboardRemove())
    if menu_category == _("–ö–æ—Ä–∑–∏–Ω–∞"):
        text = _("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
        await message.answer(f"{text}", reply_markup=ReplyKeyboardRemove())
    if menu_category == _("–ú–æ–∏ –∑–∞–∫–∞–∑—ã"):
        text = _("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        await message.answer(f"{text}", reply_markup=ReplyKeyboardRemove())
    if menu_category == _("–ü–æ–º–æ—â—å"):
        text = _("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.")
        await message.answer(f"{text}", reply_markup=ReplyKeyboardRemove())
    if menu_category == _("–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"):
        text = _("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫")
        await message.answer(f"{text}", reply_markup=lang_keyboard)


@dp.callback_query_handler(lang_callback.filter())
async def lang_handler(call: CallbackQuery, callback_data: dict):
    lang = callback_data.get("lang")
    await db.set_language(lang)
    lang_text = '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.'
    if lang == 'uz':
        lang_text = "O'zbek"
    text = _("–í—ã –≤—ã–±—Ä–∞–ª–∏ {lang}".format(lang=lang_text), locale=lang)
    await call.message.edit_reply_markup()
    await call.message.answer(text, reply_markup=menu_keyboard)
